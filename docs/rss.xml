<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Gilli's Land]]></title>
<description><![CDATA[Gilli's Land]]></description>
<link>https://mjgpy3.github.io/me</link>
<lastBuildDate>Sat, 07 May 2022 12:05:14 -0400</lastBuildDate>
<item>
  <title><![CDATA[Barry]]></title>
  <description><![CDATA[
<pre class="example">
I am not that swift little progeny; listless, flowering throughout
(Claims Barry)
Turn now won returns and fold your hands until lit cards disintegrate

I inch inward, inclining irises immediately -- indeed -- intently illumined in interest
(Barry notices)
Bargaining in that big brain, without my knowing, Barry will burp a laugh -- that maniac

Barry can barely bare the baritone bereavements of the barreling bare bear
(He's had a long day)
Established is he, the lad at the blessed stable, lashed lest he bled
</pre>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-bad_poetry.html">bad_poetry</a> <a href="https://mjgpy3.github.io/me/tag-word_play.html">word_play</a> </div>]]></description>
  <category><![CDATA[bad_poetry]]></category>
  <category><![CDATA[word_play]]></category>
  <link>https://mjgpy3.github.io/me/barry.html</link>
  <guid>https://mjgpy3.github.io/me/barry.html</guid>
  <pubDate>Wed, 04 May 2022 21:03:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[This Is Not a Blog]]></title>
  <description><![CDATA[
<p>
Over a decade ago I read a post saying that <a href="https://blog.codinghorror.com/a-blog-without-comments-is-not-a-blog/">a blog without comments is not a blog</a>. Although I agree with some of the points made therein, I will not be enabling comments on this blog.
</p>

<p>
Interested in why? Here's a snapshot of emails I get about my old blog:
</p>


<figure id="org66516aa">
<img src="assets/new-comment-emails.png" alt="new-comment-emails.png">

<figcaption><span class="figure-number">Figure 1: </span>Comments added emails</figcaption>
</figure>

<p>
Can you guess the content of 100% of those comments? Ads &#x2013; walls of links &#x2013; many of which are pornographic in nature. What a waste of time and bits. I won't be adding comments to this blog because there are other ways to contact me than below my posts.
</p>

<p>
For example, you could create a github account and <a href="https://github.com/mjgpy3/me/issues">open an issue in the blog's source</a>. Or if you have something pressing to discuss you could email me at <code>michael (dot) does (dot) stuff (at sign) protonmail (dot) com</code>.
</p>

<p>
Cheers, hope you enjoy reading this "not a blog."
</p>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-blog.html">blog</a> </div>]]></description>
  <category><![CDATA[blog]]></category>
  <link>https://mjgpy3.github.io/me/this-is-not-a-blog.html</link>
  <guid>https://mjgpy3.github.io/me/this-is-not-a-blog.html</guid>
  <pubDate>Fri, 29 Apr 2022 16:49:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Making Russian Flashcards for Reading]]></title>
  <description><![CDATA[
<p>
I have a lifetime goal to read <a href="https://en.wikipedia.org/wiki/The_Brothers_Karamazov"><i>The Brothers Karamazov</i></a> in the original Russian. I wanted to build out some Russian flashcards and I figured what better way to determine what words to use than the text of the book I want to read!
</p>

<p>
To start, I found a text file containing the Russian text of the book. This wasn't too difficult since the book's long past it's copyright. I essentially searched for "братья Карамазовы PDF" (the name of the book in Russian, followed by "PDF"). Lo and behold, I found a text copy from this search. All the better, no need to extract the text from a PDF!
</p>

<p>
I stored the text in a file called <code>brothers-k.txt</code> then wrote a little Python script to sort the words by frequency&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #5180b3;">import</span> re

<span style="color: #656565;"># </span><span style="color: #757575;">Build a regular expression to grab Russian words</span>
<span style="color: #baba36;">word</span> = re.<span style="color: #528fd1;">compile</span><span style="color: #81b0e3;">(</span><span style="color: #bdbc61;">'[&#1072;-&#1103;&#1040;-&#1071;]+'</span>, re.IGNORECASE<span style="color: #81b0e3;">)</span>

<span style="color: #656565;"># </span><span style="color: #757575;">Read in the file</span>
<span style="color: #5180b3;">with</span> <span style="color: #528fd1;">open</span><span style="color: #81b0e3;">(</span><span style="color: #bdbc61;">'./brothers-k.txt'</span>, <span style="color: #bdbc61;">'r'</span><span style="color: #81b0e3;">)</span> <span style="color: #5180b3;">as</span> f:
  <span style="color: #baba36;">raw_text</span> = f.read<span style="color: #81b0e3;">()</span>

<span style="color: #656565;"># </span><span style="color: #757575;">Store words as a mapping from word to frequency</span>
<span style="color: #baba36;">freqs</span> = <span style="color: #81b0e3;">{}</span>

<span style="color: #656565;"># </span><span style="color: #757575;">Loop through results of regex</span>
<span style="color: #5180b3;">for</span> word <span style="color: #5180b3;">in</span> <span style="color: #528fd1;">list</span><span style="color: #81b0e3;">(</span>word.findall<span style="color: #a5a5a5;">(</span>raw_text<span style="color: #a5a5a5;">)</span><span style="color: #81b0e3;">)</span>:
  <span style="color: #656565;"># </span><span style="color: #757575;">Sanitize (lowercase) word so capitalization doesn't matter as much</span>
  <span style="color: #baba36;">low</span> = word.lower<span style="color: #81b0e3;">()</span>

  <span style="color: #656565;"># </span><span style="color: #757575;">Count unique words</span>
  <span style="color: #baba36;">freqs</span><span style="color: #81b0e3;">[</span>low<span style="color: #81b0e3;">]</span> = freqs.get<span style="color: #81b0e3;">(</span>low, <span style="color: #ab75c3;">0</span><span style="color: #81b0e3;">)</span> + <span style="color: #ab75c3;">1</span>

<span style="color: #656565;"># </span><span style="color: #757575;">Print out count with word</span>
<span style="color: #5180b3;">for</span> word <span style="color: #5180b3;">in</span> <span style="color: #528fd1;">sorted</span><span style="color: #81b0e3;">(</span>freqs, key=<span style="color: #5180b3;">lambda</span> v: freqs<span style="color: #a5a5a5;">[</span>v<span style="color: #a5a5a5;">]</span>, reverse=<span style="color: #ab75c3;">True</span><span style="color: #81b0e3;">)</span>:
  <span style="color: #5180b3;">print</span><span style="color: #81b0e3;">(</span>freqs<span style="color: #a5a5a5;">[</span>word<span style="color: #a5a5a5;">]</span>, word<span style="color: #81b0e3;">)</span>
</pre>
</div>

<p>
I ran this script like so to generate <code>words.txt</code>&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-bash">./extract_words.py &gt; words.txt
</pre>
</div>

<p>
This file contains about 35,000 words that look something like&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-txt">14292 и
6863 в
6814 не
...
879 алеша
...
вечное 1
</pre>
</div>

<p>
I then wrote a little shell script to output an English translation of the word, using <a href="https://duckduckgo.com/">duckduckgo's</a> translation API. To figure out the API details I&#x2026;
</p>

<ul class="org-ul">
<li>entered a word into the translation service,</li>
<li>opened the Network tab,</li>
<li>right-clicked the request, then</li>
<li>choose "Copy &gt; Copy as CURL"</li>
</ul>

<p>
Here's the translation script, with some details omitted (using <code>...</code>) for brevity. Note that this script uses <a href="https://stedolan.github.io/jq/"><code>jq</code></a> to extract the translated value.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #656565;">#</span><span style="color: #757575;">!/usr/bin/</span><span style="color: #5180b3;">env</span><span style="color: #757575;"> bash</span>

<span style="color: #baba36;">ru_word</span>=$<span style="color: #81b0e3;">(</span><span style="color: #fa8072;">echo</span> $<span style="color: #ab75c3;">1</span> | cut -d <span style="color: #bdbc61;">' '</span> -f <span style="color: #ab75c3;">2</span><span style="color: #81b0e3;">)</span>
<span style="color: #baba36;">count</span>=$<span style="color: #81b0e3;">(</span><span style="color: #fa8072;">echo</span> $<span style="color: #ab75c3;">1</span> | cut -d <span style="color: #bdbc61;">' '</span> -f <span style="color: #ab75c3;">1</span><span style="color: #81b0e3;">)</span>

<span style="color: #baba36;">en</span>=$<span style="color: #81b0e3;">(</span><span style="color: #fa8072;">curl</span> <span style="color: #bdbc61;">'https://duckduckgo.com/translation.js?...&amp;query=translate&amp;from=ru&amp;to=en'</span> <span style="color: #bdbc61;">\</span>
     <span style="color: #656565;"># </span><span style="color: #757575;">...</span>
     -H <span style="color: #bdbc61;">'accept-language: en-US,en;q=0.9'</span> <span style="color: #bdbc61;">\</span>
     --data-raw <span style="color: #bdbc61;">"${ru_word}"</span> <span style="color: #bdbc61;">\</span>
     --silent <span style="color: #bdbc61;">\</span>
     --compressed | jq <span style="color: #bdbc61;">'.translated'</span> -r<span style="color: #81b0e3;">)</span>

<span style="color: #528fd1;">echo</span> <span style="color: #bdbc61;">"${count},${ru_word},${en}"</span>
</pre>
</div>

<p>
I then added a higher-level script to run this script, line by line&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #656565;">#</span><span style="color: #757575;">!/usr/bin/</span><span style="color: #5180b3;">env</span><span style="color: #757575;"> bash</span>

<span style="color: #528fd1;">echo</span> <span style="color: #bdbc61;">'count,ru,en'</span> &gt; words.csv

<span style="color: #5180b3;">while </span><span style="color: #528fd1;">read</span> line; <span style="color: #5180b3;">do</span>
  ./ru_to_en.sh <span style="color: #bdbc61;">"${line}"</span> &gt;&gt; words.csv
  sleep .5
<span style="color: #5180b3;">done</span> &lt;words.txt
</pre>
</div>

<p>
I did this so that (1) I could stream results easily, (2) for better clarity, and (3) so I could easily <code>sleep</code> between requests &#x2013; it's rude to make 35,000 rapid requests!
</p>

<p>
Running this script yields (and is still yielding) a CSV that looks like&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-csv">count<span style="color: #00ffff;">,</span>ru<span style="color: #00ffff;">,</span>en
14292<span style="color: #00ffff;">,</span>&#1080;<span style="color: #00ffff;">,</span>and
6863<span style="color: #00ffff;">,</span>&#1074;<span style="color: #00ffff;">,</span>in
6814<span style="color: #00ffff;">,</span>&#1085;&#1077;<span style="color: #00ffff;">,</span>not
5697<span style="color: #00ffff;">,</span>&#1095;&#1090;&#1086;<span style="color: #00ffff;">,</span>A what
4263<span style="color: #00ffff;">,</span>&#1103;<span style="color: #00ffff;">,</span>I
4112<span style="color: #00ffff;">,</span>&#1086;&#1085;<span style="color: #00ffff;">,</span>he
3819<span style="color: #00ffff;">,</span>&#1089;<span style="color: #00ffff;">,</span>with
3651<span style="color: #00ffff;">,</span>&#1085;&#1072;<span style="color: #00ffff;">,</span>on
3232<span style="color: #00ffff;">,</span>&#1090;&#1086;<span style="color: #00ffff;">,</span>that
...
</pre>
</div>

<p>
After it's done, I will take the first thousand or so words and input them into <a href="https://github.com/mjgpy3/cardstudy">my little flashcard app</a> and start memorizing!
</p>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-russian.html">russian</a> <a href="https://mjgpy3.github.io/me/tag-project.html">project</a> <a href="https://mjgpy3.github.io/me/tag-programming.html">programming</a> </div>]]></description>
  <category><![CDATA[russian]]></category>
  <category><![CDATA[project]]></category>
  <category><![CDATA[programming]]></category>
  <link>https://mjgpy3.github.io/me/making-russian-flashcards-for-reading.html</link>
  <guid>https://mjgpy3.github.io/me/making-russian-flashcards-for-reading.html</guid>
  <pubDate>Sat, 09 Apr 2022 14:22:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Arbitrary Post]]></title>
  <description><![CDATA[
<p>
Cross-posting a <a href="https://tech.freckle.com/2022/04/07/it-doesnt-have-to-be-arbitrary/">blog post</a> that I wrote on Haskell <code>Arbitrary</code> instances. It's neat to work at a company that encourages writing blogs as part of your day job. <a href="https://freckle.com/en-us/">Freckle</a> rocks.
</p>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-haskell.html">haskell</a> <a href="https://mjgpy3.github.io/me/tag-work.html">work</a> <a href="https://mjgpy3.github.io/me/tag-programming.html">programming</a> </div>]]></description>
  <category><![CDATA[haskell]]></category>
  <category><![CDATA[work]]></category>
  <category><![CDATA[programming]]></category>
  <link>https://mjgpy3.github.io/me/arbitrary-post.html</link>
  <guid>https://mjgpy3.github.io/me/arbitrary-post.html</guid>
  <pubDate>Fri, 08 Apr 2022 21:04:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Bane Dominion Expansion]]></title>
  <description><![CDATA[

<div id="outline-container-org80faad0" class="outline-2">
<h2 id="org80faad0">Why Bane?</h2>
<div class="outline-text-2" id="text-org80faad0">
<p>
I created a <a href="https://www.riograndegames.com/games/dominion/">dominion</a> expansion based around the <a href="http://wiki.dominionstrategy.com/index.php/Bane">Young Witch's bane card</a>.
</p>

<p>
The reason for using "Bane" (e.g. deck modifiers) as the main deck engine is simple. You can print the cards out (using a tool like <a href="https://shardofhonor.github.io/dominion-card-generator/?title=&amp;description=&amp;type=&amp;credit=&amp;creator=&amp;price=&amp;preview=&amp;type2=&amp;color2split=1&amp;boldkeys=&amp;picture-x=0&amp;picture-y=0&amp;picture-zoom=1&amp;picture=&amp;expansion=&amp;custom-icon=&amp;color0=0&amp;color1=0&amp;size=4">the card generator</a>) and use them with your existing cards. No need for fancy card-stock, matching backs, and all that &#x2013; just print them out and play.
</p>
</div>
</div>

<div id="outline-container-orgda8021d" class="outline-2">
<h2 id="orgda8021d">General Notes</h2>
<div class="outline-text-2" id="text-orgda8021d">
<ul class="org-ul">
<li>Bane cards lay under kingdom piles and grant them new behaviors.</li>
<li>Bane cards that grant a card a new type (e.g. <i>Fortification</i>) do this in addition to its existing types though card types remain</li>
<li>Kingdom cards should have at most one Bane modifier</li>
<li>It's recommended to use no more than 3 Bane cards in a kingdom</li>
</ul>
</div>
</div>

<div id="outline-container-org391c26f" class="outline-2">
<h2 id="org391c26f">Bane Behaviors</h2>
<div class="outline-text-2" id="text-org391c26f">
<p>
Here are the card names and their behaviors.
</p>
</div>

<div id="outline-container-org724637d" class="outline-3">
<h3 id="org724637d">Bargain</h3>
<div class="outline-text-3" id="text-org724637d">
<p>
These cost 1 less than marked but not less than 0.
</p>
</div>
</div>

<div id="outline-container-orgbdd4524" class="outline-3">
<h3 id="orgbdd4524">Buy and Buy</h3>
<div class="outline-text-3" id="text-orgbdd4524">
<p>
When you gain one of these, +1 buy.
</p>
</div>
</div>

<div id="outline-container-org878fd52" class="outline-3">
<h3 id="org878fd52">Cover of Darkness</h3>
<div class="outline-text-3" id="text-org878fd52">
<p>
After you buy one of these, move the top card from any kingdom pile on top of any other kingdom pile.
</p>
</div>
</div>

<div id="outline-container-org5a40aaa" class="outline-3">
<h3 id="org5a40aaa">Cursed Heirloom</h3>
<div class="outline-text-3" id="text-org5a40aaa">
<p>
When you buy one of these each other player gains a curse.
</p>
</div>
</div>

<div id="outline-container-org86e5569" class="outline-3">
<h3 id="org86e5569">Exchange</h3>
<div class="outline-text-3" id="text-org86e5569">
<p>
When you buy one of these, players pass a card from their hand to the next player's hand (simultaneously).
</p>
</div>
</div>

<div id="outline-container-org4e3207d" class="outline-3">
<h3 id="org4e3207d">Flank</h3>
<div class="outline-text-3" id="text-org4e3207d">
<p>
If you have one of these in your hand at the start of your turn, you may discard your hand and redraw it.
</p>

<p>
You draw the same number of cards as you discarded (including the Flank card).
</p>
</div>
</div>

<div id="outline-container-org2d11532" class="outline-3">
<h3 id="org2d11532">Fools Gold</h3>
<div class="outline-text-3" id="text-org2d11532">
<p>
These cannot be purchased using $. You must use a combination of actions and buys instead.
</p>
</div>
</div>

<div id="outline-container-org92cf85d" class="outline-3">
<h3 id="org92cf85d">Fortification</h3>
<div class="outline-text-3" id="text-org92cf85d">
<p>
These may be used as a Reaction with the same defense as Moat (reveal to block any attack).
</p>

<p>
These are now considered a Reaction cards, if not already.
</p>
</div>
</div>

<div id="outline-container-org347823c" class="outline-3">
<h3 id="org347823c">Frontier</h3>
<div class="outline-text-3" id="text-org347823c">
<p>
When you gain one of these you may also gain any other buy-able card in the game that has not yet been gained by a player.
</p>
</div>
</div>

<div id="outline-container-org7ff84eb" class="outline-3">
<h3 id="org7ff84eb">Gambler</h3>
<div class="outline-text-3" id="text-org7ff84eb">
<p>
When you acquire one of these, flip a coin. If heads, gain +$3, if tails, gain a curse.
</p>
</div>
</div>

<div id="outline-container-orgaa691f5" class="outline-3">
<h3 id="orgaa691f5">Magic Shield</h3>
<div class="outline-text-3" id="text-orgaa691f5">
<p>
If you have one of these in hand when you would have been cursed, you may reveal it to instead curse the player who tried to curse you.
</p>

<p>
If they reveal magic shield, you instead trash the curse.
</p>

<p>
These are now considered a Reaction cards, if not already.
</p>
</div>
</div>

<div id="outline-container-orgf8c21ed" class="outline-3">
<h3 id="orgf8c21ed">Opportune</h3>
<div class="outline-text-3" id="text-orgf8c21ed">
<p>
When played as actions, these give +1 action, +1 card before its listed affects.
</p>

<p>
These are now considered a Action cards, if not already.
</p>
</div>
</div>

<div id="outline-container-orgf45af40" class="outline-3">
<h3 id="orgf45af40">Plague Cart</h3>
<div class="outline-text-3" id="text-orgf45af40">
<p>
When you buy one of these, name a card. All other players must trash that card or reveal that they cannot.
</p>
</div>
</div>

<div id="outline-container-org1e2ab87" class="outline-3">
<h3 id="org1e2ab87">Rebate</h3>
<div class="outline-text-3" id="text-org1e2ab87">
<p>
When you gain one of these, +$1.
</p>
</div>
</div>

<div id="outline-container-org5eaafe6" class="outline-3">
<h3 id="org5eaafe6">Sacrifice</h3>
<div class="outline-text-3" id="text-org5eaafe6">
<p>
When you gain one of these, trash a card from another kingdom pile of equal or lesser value.
</p>
</div>
</div>

<div id="outline-container-org890a0d4" class="outline-3">
<h3 id="org890a0d4">Secret Plans</h3>
<div class="outline-text-3" id="text-org890a0d4">
<p>
These are also worth 1VP.
</p>

<p>
These are now considered a Victory cards, if not already.
</p>
</div>
</div>

<div id="outline-container-org1724c1c" class="outline-3">
<h3 id="org1724c1c">Silver Mine</h3>
<div class="outline-text-3" id="text-org1724c1c">
<p>
When you gain one of these, also gain a silver.
</p>
</div>
</div>

<div id="outline-container-org1c273ed" class="outline-3">
<h3 id="org1c273ed">Throne</h3>
<div class="outline-text-3" id="text-org1c273ed">
<p>
These behave as if they were Throne Roomed when playing them as actions.
</p>
</div>
</div>

<div id="outline-container-org5db3441" class="outline-3">
<h3 id="org5db3441">Treasury Key</h3>
<div class="outline-text-3" id="text-org5db3441">
<p>
If you cause this pile to be depleted, gain 6 golds.    
</p>
</div>
</div>

<div id="outline-container-orgb46fe5d" class="outline-3">
<h3 id="orgb46fe5d">Tunnel</h3>
<div class="outline-text-3" id="text-orgb46fe5d">
<p>
These are gained directly to your deck instead of discard pile.
</p>
</div>
</div>

<div id="outline-container-orgc5a33ae" class="outline-3">
<h3 id="orgc5a33ae">Vault</h3>
<div class="outline-text-3" id="text-orgc5a33ae">
<p>
When you gain one of these, set aside another card from your hand. When you finish your turn, put the set aside card into your new hand.
</p>
</div>
</div>

<div id="outline-container-org58660b8" class="outline-3">
<h3 id="org58660b8">Zebra</h3>
<div class="outline-text-3" id="text-org58660b8">
<p>
This pile is comprised half of one pile of kingdom cards shuffled with another half pile.
</p>

<p>
The kingdom cards and top card are known but the order is secret.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-dominion.html">dominion</a> <a href="https://mjgpy3.github.io/me/tag-project.html">project</a> </div>]]></description>
  <category><![CDATA[dominion]]></category>
  <category><![CDATA[project]]></category>
  <link>https://mjgpy3.github.io/me/bane-dominion-expansion.html</link>
  <guid>https://mjgpy3.github.io/me/bane-dominion-expansion.html</guid>
  <pubDate>Fri, 08 Apr 2022 16:40:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Toddler Trilemma]]></title>
  <description><![CDATA[
<p>
Before I became the parent of a toddler, there were phrases I never imagined myself saying. "Because I said so" and "because that's how it is" are answers that I've never found satisfactory &#x2013; why should a toddler? Well, lo and behold, I find myself using phrases like these more than I'd care to admit as a defense against the endless barrage of <i>why?</i>.
</p>

<p>
The other day, while indulging a particularly long stream of <i>why?</i>, my mind began to wonder and I started to connect the situation to a bit of formal logic I studied eons ago.
</p>

<p>
I don't think about formal logic often but one thing that's always stuck with me is the <a href="https://en.wikipedia.org/wiki/M%C3%BCnchhausen_trilemma">Münchhausen trilemma</a>.
</p>

<p>
This "trilemma" asserts that there are only three ways to actually prove something:
</p>
<ul class="org-ul">
<li>circular reasoning</li>
<li>infinite regression</li>
<li>argument from authority/axiom</li>
</ul>

<p>
See the connection?
</p>

<p>
Answering "because I said so" is a lot like an argument from authority or an axiomatic argument. In this case, it's so, well, because I said it is &#x2013; I'm the authority.
</p>

<p>
Responding "because that's how it is" is a circular argument, albeit a boring one without any little arguments in between.
</p>

<p>
What about an infinite regression argument? Well logicians, hear us parents out, these don't exist. A toddler's endurance in asking "why?" far surpasses that of the parent in articulating coherent responses. Münchhausen I see your trilemma; meet the Toddler's Dilemma; Occam would be so proud.
</p>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-parenting.html">parenting</a> <a href="https://mjgpy3.github.io/me/tag-philosophy.html">philosophy</a> <a href="https://mjgpy3.github.io/me/tag-logic.html">logic</a> </div>]]></description>
  <category><![CDATA[parenting]]></category>
  <category><![CDATA[philosophy]]></category>
  <category><![CDATA[logic]]></category>
  <link>https://mjgpy3.github.io/me/toddler-trilemma.html</link>
  <guid>https://mjgpy3.github.io/me/toddler-trilemma.html</guid>
  <pubDate>Mon, 04 Apr 2022 20:24:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[org-mode Blog in spacemacs and Github Pages]]></title>
  <description><![CDATA[
<p>
I just published the famous <a href="https://mjgpy3.github.io/me/hello-world.html">"hello world" article</a> using
</p>
<ul class="org-ul">
<li><a href="https://github.com/bastibe/org-static-blog">org-static-blog</a>,</li>
<li><a href="https://www.spacemacs.org/">spacemacs</a>, and</li>
<li><a href="https://pages.github.com/">Github pages</a></li>
</ul>

<p>
As an equally-famous followup, here's the "how I did it" post.
</p>

<p>
To start, I added the <code>org-static-blog</code> package to my <code>.spacemacs</code> file.
</p>

<div class="org-src-container">
<pre class="src src-elisp">dotspacemacs-additional-packages '<span style="color: #81b0e3;">(</span>org-static-blog<span style="color: #81b0e3;">)</span>
</pre>
</div>

<p>
Next, I added the generic <a href="https://github.com/bastibe/org-static-blog#minimal-configuration">minimal configuration</a> that the package recommends, substituting values for my specific setup. I set <code>org-static-blog-page-postamble</code> to the empty string because I didn't like seeing duplicate "Other Posts" links.
</p>

<p>
Then I added a new post under my <a href="https://github.com/mjgpy3/me/blob/main/posts/hello-world.org"><code>posts</code> folder</a>.
</p>

<p>
Then I ran <code>org-static-blog-publish</code> and viola, a git add/commit/push later and here we are.
</p>

<p>
To configure Github pages, I went to my repository's "Settings" page and, under the "Pages" tab, I chose the repo's <code>docs</code> folder. <code>docs</code> is where I configured <code>org-static-blog</code> to generate content.
</p>

<p>
But, enough meta-blogging, where's the content?
</p>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-emacs.html">emacs</a> <a href="https://mjgpy3.github.io/me/tag-blog.html">blog</a> <a href="https://mjgpy3.github.io/me/tag-spacemacs.html">spacemacs</a> <a href="https://mjgpy3.github.io/me/tag-github.html">github</a> <a href="https://mjgpy3.github.io/me/tag-project.html">project</a> <a href="https://mjgpy3.github.io/me/tag-howto.html">howto</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[spacemacs]]></category>
  <category><![CDATA[github]]></category>
  <category><![CDATA[project]]></category>
  <category><![CDATA[howto]]></category>
  <link>https://mjgpy3.github.io/me/org-mode-blog-in-spacemacs-and-github-pages.html</link>
  <guid>https://mjgpy3.github.io/me/org-mode-blog-in-spacemacs-and-github-pages.html</guid>
  <pubDate>Mon, 04 Apr 2022 16:09:00 -0400</pubDate>
</item>
<item>
  <title><![CDATA[Hello World]]></title>
  <description><![CDATA[
<p>
Hello there! This is a test of blogging using <code>org-static-blog</code>. I'll publish a followup explaining how I got it working with spacemacs and github pages.
</p>
<div class="taglist"><a href="https://mjgpy3.github.io/me/tags.html">Tags</a>: <a href="https://mjgpy3.github.io/me/tag-emacs.html">emacs</a> <a href="https://mjgpy3.github.io/me/tag-blog.html">blog</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[blog]]></category>
  <link>https://mjgpy3.github.io/me/hello-world.html</link>
  <guid>https://mjgpy3.github.io/me/hello-world.html</guid>
  <pubDate>Mon, 04 Apr 2022 15:43:00 -0400</pubDate>
</item>
</channel>
</rss>
